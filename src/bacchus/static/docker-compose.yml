version: "3.3"
services:
  traefik:
    image: "traefik:v2.4"
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=gandiv5
      - --certificatesresolvers.letsencrypt.acme.email=EMAIL
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=HOST
    ports:
      - "443:443"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    env_file:
      - .env_traefik
  openvpn:
    image: kylemanna/openvpn
    restart: always
    cap_add:
      - NET_ADMIN
    ports:
       - "1194:1194/udp"
    volumes:
      - ./data/openvpn/:/etc/openvpn
    env_file:
      - .env_general
    labels:
      - com.centurylinklabs.watchtower.enable=true
  pihole:
    image: pihole/pihole:latest
    restart: always 
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
    volumes:
      - './data/etc-pihole/:/etc/pihole/'
      - './data/etc-dnsmasq.d/:/etc/dnsmasq.d/'
    dns:
      # TODO: Add unbounddns
      - 127.0.0.1
      - 1.1.1.1
    cap_add:
      - NET_ADMIN
    env_file:
      - .env_general
    labels:
      - com.centurylinklabs.watchtower.enable=true
  kodi:
    image: xayon/docker-kodi-beta:gbm
    restart: always
    privileged: True
    volumes:
     - ./data/kodi_matrix:/root
     - /dev/bus/usb:/dev/bus/usb
     - /etc/group:/etc/group:ro
     - /etc/passwd:/etc/passwd:ro
     - /etc/shadow:/etc/shadow:ro
    labels:
      - traefik.http.routers.kodi.rule=Host(`HOST`) && PathPrefix(`/kodi`)
      - traefik.http.routers.kodi.tls=true
      - traefik.http.routers.kodi.tls.certresolver=letsencrypt
      - traefik.http.services.kodi.loadbalancer.server.port=8080
      - com.centurylinklabs.watchtower.enable=true
    env_file:
      - .env_general
  jackett:
    image: ghcr.io/linuxserver/jackett
    restart: always
    volumes:
      - ./data/jackett:/config
      - ./data/downloads/complete:/downloads
    labels:
      - traefik.http.routers.jackett.rule=Host(`HOST`) && PathPrefix(`/jackett`)
      - traefik.http.routers.jackett.tls=true
      - traefik.http.routers.jackett.tls.certresolver=letsencrypt
      - traefik.http.services.jackett.loadbalancer.server.port=9117
      - com.centurylinklabs.watchtower.enable=true
    env_file:
      - .env_general
  transmission:
    image: ghcr.io/linuxserver/transmission
    restart: always
    volumes:
      - ./data/transmission/config:/config
      - ./data/downloads:/downloads
    labels:
      - traefik.http.routers.transmission.rule=Host(`HOST`) && PathPrefix(`/transmission`)
      - traefik.http.routers.transmission.tls=true
      - traefik.http.routers.transmission.tls.certresolver=letsencrypt
      - traefik.http.services.transmission.loadbalancer.server.port=9091
      - com.centurylinklabs.watchtower.enable=true
    env_file:
      - .env_general
  sonarr:
    image: ghcr.io/linuxserver/sonarr
    restart: always
    volumes:
      - ./data/sonarr:/config
      - ./media/tv:/tv
      - ./data/downloads/complete:/downloads
    labels:
      - traefik.http.routers.sonarr.rule=Host(`HOST`) && PathPrefix(`/sonarr`)
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.certresolver=letsencrypt
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - com.centurylinklabs.watchtower.enable=true
    env_file:
      - .env_general
  lidarr:
    image: ghcr.io/linuxserver/lidarr
    restart: always
    volumes:
      - ./data/lidarr:/config
      - ./media/music:/music
      - ./data/downloads/complete:/downloads
    labels:
      - traefik.http.routers.lidarr.rule=Host(`HOST`) && PathPrefix(`/lidarr`)
      - traefik.http.routers.lidarr.tls=true
      - traefik.http.routers.lidarr.tls.certresolver=letsencrypt
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
      - com.centurylinklabs.watchtower.enable=true
    env_file:
      - .env_general
  readarr:
    image: hotio/readarr:nightly
    restart: always
    volumes:
      - ./data/readarr:/config
      - ./media/movies:/movies
      - ./data/downloads/complete:/downloads
    labels:
      - traefik.http.routers.readarr.rule=Host(`HOST`) && PathPrefix(`/readarr`)
      - traefik.http.routers.readarr.tls=true
      - traefik.http.routers.readarr.tls.certresolver=letsencrypt
      - traefik.http.services.readarr.loadbalancer.server.port=8787
      - com.centurylinklabs.watchtower.enable=true
    env_file:
      - .env_general
  radarr:
    image: ghcr.io/linuxserver/radarr
    restart: always
    volumes:
      - ./data/radarr:/config
      - ./media/movies:/movies
      - ./data/downloads/complete:/downloads
    labels:
      - traefik.http.routers.radarr.rule=Host(`HOST`) && PathPrefix(`/radarr`)
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.tls.certresolver=letsencrypt
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - com.centurylinklabs.watchtower.enable=true
    env_file:
      - .env_general
  jellyfin:
    image: ghcr.io/linuxserver/jellyfin
    restart: always 
    volumes:
      - ./data/jellyfin:/config
      - ./data/media/tv:/data/tvshows
      - ./data/media/music:/data/music
      - ./data/media/books:/data/books
      - ./data/media/movies:/data/movies
    labels:
      - traefik.http.routers.jellyfin.rule=Host(`HOST`) && PathPrefix(`/jellyfin`)
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certresolver=letsencrypt
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
      - com.centurylinklabs.watchtower.enable=true
    env_file:
      - .env_general
  ombi:
    image: ghcr.io/linuxserver/ombi
    restart: always 
    volumes:
      - ./data/ombi/:/config
    environment:
      - BASE_URL=/ombi
    labels:
      - traefik.http.routers.ombi.rule=Host(`HOST`) && PathPrefix(`/ombi`)
      - traefik.http.routers.ombi.tls=true
      - traefik.http.routers.ombi.tls.certresolver=letsencrypt
      - traefik.http.services.ombi.loadbalancer.server.port=3579
      - com.centurylinklabs.watchtower.enable=true
    env_file:
      - .env_general
  nextcloud:
    image: nextcloud:latest
    restart: always
    networks:
      - common
    volumes:
      - ./media/nextcloud/:/data/
  mariadb:
    image: mariadb:10
    restart: always
    depends_on:
      - watchtower
    env_file: .env_mariadb
    labels:
      - com.centurylinklabs.watchtower.enable=true
    volumes:
      - ./data/mariadb:/var/lib/mysql
  redis:
    image: redis:5
    restart: always
    depends_on:
      - watchtower
    labels:
      - com.centurylinklabs.watchtower.enable=true
    volumes:
      - ./data/redis:/data
  ubooquity:
    image: ghcr.io/linuxserver/ubooquity
    restart: always
    env_file:
      - .env_general
    volumes:
      - ./data/ubooquity:/config
      - ./data/media/books/:/books
      - ./data/media/comics/:/comics
    # TODO: Admin iface
    labels:
      - traefik.http.routers.ubooquity.rule=Host(`HOST`) && PathPrefix(`/ubooquity`)
      - traefik.http.routers.ubooquity.tls=true
      - traefik.http.routers.ubooquity.tls.certresolver=letsencrypt
      - traefik.http.services.ubooquity.loadbalancer.server.port=2202
      - com.centurylinklabs.watchtower.enable=true
  nextcloud:
    image: nextcloud:latest
    restart: always
    depends_on:
      - mariadb
      - redis
      - traefik
      - watchtower
    volumes:
      - ./data/nextcloud/html:/var/www/html
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.nextcloud-caldav.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud-caldav.redirectregex.regex=^https://(.*)/.well-known/(card|cal)dav
      - traefik.http.middlewares.nextcloud-caldav.redirectregex.replacement=https://$${1}/remote.php/dav/
      - traefik.http.routers.nextcloud.entrypoints=websecure
      - traefik.http.routers.nextcloud.rule=Host(`HOST`)
      - traefik.http.routers.nextcloud.middlewares=nextcloud-caldav@docker
      - traefik.http.routers.nextcloud.tls=true
      - traefik.http.routers.nextcloud.tls.certresolver=letsencrypt
      - com.centurylinklabs.watchtower.enable=true
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 86400
